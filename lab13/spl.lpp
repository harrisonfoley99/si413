/* SI 413 Fall 2019
 * Lab 13
 * This is a scanner specification for the SPL programming language.
 * The semantic values are either leaves in the AST or operator codes.
 */

%{
#include <iostream>
#include <cstdlib>
using namespace std;
#include "splc.hpp"
#include "ast.hpp"
#include "spl.tab.hpp"

// Called if there is a scanner error
void scanerror() {
    errout << "Unrecognized token starting with " << yytext << endl;
    exit(2);
}

// Returns the type of comparison operator that we are seeing.
Oper getCompOp(const char* text) {
  switch(text[0]) {
    case '=': return EQ;
    case '!': return NE;
    case '>': return (text[1] == '=' ? GE : GT);
    case '<': return (text[1] == '=' ? LE : LT);
    default: exit(8); // never reached
  }
}

// Strips leading and trailing quote marks from the given C string
char* quotestrip(char* str) {
  char* toret = str;
  while (toret[0] == '"') ++toret;
  for (int i=0; toret[i] != '\0'; ++i) {
    if (toret[i] == '"') toret[i] = '\0';
  }
  return toret;
}

extern std::istream *lexer_istream;

// Define YY_INPUT to get from lexer_istream
// This definition mirrors the functionality of the default
// interactive YY_INPUT
#define YY_INPUT(buf, result, max_size)  \
{  result = 0;			 \
  while (1) { \
    int c = lexer_istream->get(); \
    if (lexer_istream->eof()) { \
      break; \
    } \
    buf[result++] = c; \
    if (result == max_size || c == '\n') { \
      break; \
    } \
  }\
}
%}

%option noyywrap
%option nounput

%%

[0-9]+     {yylval.exp = new Num(atoi(yytext)); return NUM;}
true|false {yylval.exp = new BoolExp(yytext[0] == 't'); return BOOL;}
[+-]       {yylval.op = (yytext[0] == '+' ? ADD : SUB); return OPA;}
[*/]       {yylval.op = (yytext[0] == '*' ? MUL : DIV); return OPM;}
and|or     {yylval.op = (yytext[0] == 'a' ? AND : OR); return BOP;}
not        {yylval.op = NOT; return NOTTOK;}
":="       {return ASN;}
"@"        {return FUNARG;}
"("        {return LP;}
")"        {return RP;}
"{"        {return LC;}
"}"        {return RC;}
";"        {return STOP;}
[><=]|([><!]=) {yylval.op = getCompOp(yytext); return COMP;}
if         {return IF;}
ifelse     {return IFELSE;}
while      {return WHILE;}
read       {return READ;}
write      {return WRITE;}
lambda     {return LAMBDA;}
new        {return NEW;}
[a-zA-Z0-9_]+ {yylval.id = new Id(yytext); return ID;}
<<EOF>>  { return 0; }
[ \t\n]+ { }
"#".*    { }
.        { scanerror(); return -1; }
\".[^"\n]*.\"    {yylval.stmt = new Debug(yytext); return DEBUG;}

%%
std::istream *lexer_istream = &cin;
